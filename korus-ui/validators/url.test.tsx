import { validateUrl } from './url';

describe('url validator testing', () => {
  it('should be invalid', () => {
    expect(validateUrl('')).toBeFalsy();
    expect(validateUrl('01248')).toBeFalsy();
    expect(validateUrl('abcdef')).toBeFalsy();
  });
  it('should be valid', () => {
    expect(validateUrl('foo.com')).toBeTruthy();
    expect(validateUrl('http://esphere.ru')).toBeTruthy();
    expect(validateUrl('http://esphere.ru/')).toBeTruthy();
    expect(validateUrl('http://esphere.ru/home')).toBeTruthy();
    expect(validateUrl('https://esphere.ru')).toBeTruthy();
    expect(validateUrl('https://esphere.ru/')).toBeTruthy();
    expect(validateUrl('https://esphere.ru/home')).toBeTruthy();
    expect(validateUrl('http://localhost/')).toBeTruthy();
    expect(validateUrl('https://localhost:9000/')).toBeTruthy();
  });
});

describe('common url validator testing', () => {
  it('should be invalid', () => {
    expect(validateUrl('http://')).toBeFalsy();
    expect(validateUrl('http://.')).toBeFalsy();
    expect(validateUrl('http://..')).toBeFalsy();
    expect(validateUrl('http://../')).toBeFalsy();
    expect(validateUrl('http://?')).toBeFalsy();
    expect(validateUrl('http://??')).toBeFalsy();
    expect(validateUrl('http://??/')).toBeFalsy();
    expect(validateUrl('http://#')).toBeFalsy();
    expect(validateUrl('http://##')).toBeFalsy();
    expect(validateUrl('http://##/')).toBeFalsy();
    expect(validateUrl('http://foo.bar?q=Spaces should be encoded')).toBeFalsy();
    expect(validateUrl('//')).toBeFalsy();
    expect(validateUrl('//a')).toBeFalsy();
    expect(validateUrl('///a')).toBeFalsy();
    expect(validateUrl('///')).toBeFalsy();
    expect(validateUrl('http:///a')).toBeFalsy();
    // expect(validateUrl('foo.com')).toBeFalsy();
    expect(validateUrl('rdar://1234')).toBeFalsy();
    expect(validateUrl('h://test')).toBeFalsy();
    expect(validateUrl('http:// shouldfail.com')).toBeFalsy();
    expect(validateUrl(':// should fail')).toBeFalsy();
    expect(validateUrl('http://foo.bar/foo(bar)baz quux')).toBeFalsy();
    expect(validateUrl('ftps://foo.bar/')).toBeFalsy();
    expect(validateUrl('http://-error-.invalid/')).toBeFalsy();
    // expect(validateUrl('http://a.b--c.de/')).toBeFalsy();
    expect(validateUrl('http://-a.b.co')).toBeFalsy();
    expect(validateUrl('http://a.b-.co')).toBeFalsy();
    expect(validateUrl('http://0.0.0.0')).toBeFalsy();
    expect(validateUrl('http://10.1.1.0')).toBeFalsy();
    expect(validateUrl('http://10.1.1.255')).toBeFalsy();
    expect(validateUrl('http://224.1.1.1')).toBeFalsy();
    expect(validateUrl('http://1.1.1.1.1')).toBeFalsy();
    expect(validateUrl('http://123.123.123')).toBeFalsy();
    expect(validateUrl('http://3628126748')).toBeFalsy();
    expect(validateUrl('http://.www.foo.bar/')).toBeFalsy();
    // expect(validateUrl('http://www.foo.bar./')).toBeFalsy();
    expect(validateUrl('http://.www.foo.bar./')).toBeFalsy();
    expect(validateUrl('http://10.1.1.1')).toBeFalsy();
  });
  it('should be valid', () => {
    expect(validateUrl('http://foo.com/blah_blah')).toBeTruthy();
    expect(validateUrl('http://foo.com/blah_blah/')).toBeTruthy();
    expect(validateUrl('http://foo.com/blah_blah_(wikipedia)')).toBeTruthy();
    expect(validateUrl('http://foo.com/blah_blah_(wikipedia)_(again)')).toBeTruthy();
    expect(validateUrl('http://www.example.com/wpstyle/?p=364')).toBeTruthy();
    expect(validateUrl('https://www.example.com/foo/?bar=baz&inga=42&quux')).toBeTruthy();
    expect(validateUrl('http://✪df.ws/123')).toBeTruthy();
    expect(validateUrl('http://userid:password@example.com:8080')).toBeTruthy();
    expect(validateUrl('http://userid:password@example.com:8080/')).toBeTruthy();
    expect(validateUrl('http://userid@example.com')).toBeTruthy();
    expect(validateUrl('http://userid@example.com/')).toBeTruthy();
    expect(validateUrl('http://userid@example.com:8080')).toBeTruthy();
    expect(validateUrl('http://userid@example.com:8080/')).toBeTruthy();
    expect(validateUrl('http://userid:password@example.com')).toBeTruthy();
    expect(validateUrl('http://userid:password@example.com/')).toBeTruthy();
    expect(validateUrl('http://142.42.1.1/')).toBeTruthy();
    expect(validateUrl('http://142.42.1.1:8080/')).toBeTruthy();
    expect(validateUrl('http://➡.ws/䨹')).toBeTruthy();
    expect(validateUrl('http://⌘.ws')).toBeTruthy();
    expect(validateUrl('http://⌘.ws/')).toBeTruthy();
    expect(validateUrl('http://foo.com/blah_(wikipedia)#cite-1')).toBeTruthy();
    expect(validateUrl('http://foo.com/blah_(wikipedia)_blah#cite-1')).toBeTruthy();
    expect(validateUrl('http://foo.com/unicode_(✪)_in_parens')).toBeTruthy();
    expect(validateUrl('http://foo.com/(something)?after=parens')).toBeTruthy();
    expect(validateUrl('http://☺.damowmow.com/')).toBeTruthy();
    expect(validateUrl('http://code.google.com/events/#&product=browser')).toBeTruthy();
    expect(validateUrl('http://j.mp')).toBeTruthy();
    expect(validateUrl('ftp://foo.bar/baz')).toBeTruthy();
    expect(validateUrl('http://foo.bar/?q=Test%20URL-encoded%20stuff')).toBeTruthy();
    expect(validateUrl('http://مثال.إختبار')).toBeTruthy();
    expect(validateUrl('http://例子.测试')).toBeTruthy();
    expect(validateUrl('http://उदाहरण.परीक्षा')).toBeTruthy();
    expect(validateUrl('http://-.~_!$&\'()*+,;=:%40:80%2f::::::@example.com')).toBeTruthy();
    expect(validateUrl('http://1337.net')).toBeTruthy();
    expect(validateUrl('http://a.b-c.de')).toBeTruthy();
    expect(validateUrl('http://223.255.255.254')).toBeTruthy();
  });
});
